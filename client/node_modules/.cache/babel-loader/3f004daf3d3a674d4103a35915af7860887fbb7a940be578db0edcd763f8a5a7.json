{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dumpClassLists = dumpClassLists;\nvar htmlClassList = {};\nvar docBodyClassList = {};\nfunction dumpClassLists() {\n  if (process.env.NODE_ENV !== \"production\") {\n    var classes = document.getElementsByTagName(\"html\")[0].className;\n    var buffer = \"Show tracked classes:\\n\\n\";\n    buffer += \"<html /> (\" + classes + \"):\\n\";\n    for (var x in htmlClassList) {\n      buffer += \"  \" + x + \" \" + htmlClassList[x] + \"\\n\";\n    }\n    classes = document.body.className;\n\n    // eslint-disable-next-line max-len\n    buffer += \"\\n\\ndoc.body (\" + classes + \"):\\n\";\n    for (var _x in docBodyClassList) {\n      buffer += \"  \" + _x + \" \" + docBodyClassList[_x] + \"\\n\";\n    }\n    buffer += \"\\n\";\n\n    // eslint-disable-next-line no-console\n    console.log(buffer);\n  }\n}\n\n/**\n * Track the number of reference of a class.\n * @param {object} poll The poll to receive the reference.\n * @param {string} className The class name.\n * @return {string}\n */\nvar incrementReference = function incrementReference(poll, className) {\n  if (!poll[className]) {\n    poll[className] = 0;\n  }\n  poll[className] += 1;\n  return className;\n};\n\n/**\n * Drop the reference of a class.\n * @param {object} poll The poll to receive the reference.\n * @param {string} className The class name.\n * @return {string}\n */\nvar decrementReference = function decrementReference(poll, className) {\n  if (poll[className]) {\n    poll[className] -= 1;\n  }\n  return className;\n};\n\n/**\n * Track a class and add to the given class list.\n * @param {Object} classListRef A class list of an element.\n * @param {Object} poll         The poll to be used.\n * @param {Array}  classes      The list of classes to be tracked.\n */\nvar trackClass = function trackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    incrementReference(poll, className);\n    classListRef.add(className);\n  });\n};\n\n/**\n * Untrack a class and remove from the given class list if the reference\n * reaches 0.\n * @param {Object} classListRef A class list of an element.\n * @param {Object} poll         The poll to be used.\n * @param {Array}  classes      The list of classes to be untracked.\n */\nvar untrackClass = function untrackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    decrementReference(poll, className);\n    poll[className] === 0 && classListRef.remove(className);\n  });\n};\n\n/**\n * Public inferface to add classes to the document.body.\n * @param {string} bodyClass The class string to be added.\n *                           It may contain more then one class\n *                           with ' ' as separator.\n */\nvar add = exports.add = function add(element, classString) {\n  return trackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};\n\n/**\n * Public inferface to remove classes from the document.body.\n * @param {string} bodyClass The class string to be added.\n *                           It may contain more then one class\n *                           with ' ' as separator.\n */\nvar remove = exports.remove = function remove(element, classString) {\n  return untrackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","dumpClassLists","htmlClassList","docBodyClassList","process","env","NODE_ENV","classes","document","getElementsByTagName","className","buffer","x","body","_x","console","log","incrementReference","poll","decrementReference","trackClass","classListRef","forEach","add","untrackClass","remove","element","classString","classList","nodeName","toLowerCase","split"],"sources":["/home/lewis/AS/Farmart-front/client/node_modules/react-modal/lib/helpers/classList.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dumpClassLists = dumpClassLists;\nvar htmlClassList = {};\nvar docBodyClassList = {};\n\nfunction dumpClassLists() {\n  if (process.env.NODE_ENV !== \"production\") {\n    var classes = document.getElementsByTagName(\"html\")[0].className;\n    var buffer = \"Show tracked classes:\\n\\n\";\n\n    buffer += \"<html /> (\" + classes + \"):\\n\";\n    for (var x in htmlClassList) {\n      buffer += \"  \" + x + \" \" + htmlClassList[x] + \"\\n\";\n    }\n\n    classes = document.body.className;\n\n    // eslint-disable-next-line max-len\n    buffer += \"\\n\\ndoc.body (\" + classes + \"):\\n\";\n    for (var _x in docBodyClassList) {\n      buffer += \"  \" + _x + \" \" + docBodyClassList[_x] + \"\\n\";\n    }\n\n    buffer += \"\\n\";\n\n    // eslint-disable-next-line no-console\n    console.log(buffer);\n  }\n}\n\n/**\n * Track the number of reference of a class.\n * @param {object} poll The poll to receive the reference.\n * @param {string} className The class name.\n * @return {string}\n */\nvar incrementReference = function incrementReference(poll, className) {\n  if (!poll[className]) {\n    poll[className] = 0;\n  }\n  poll[className] += 1;\n  return className;\n};\n\n/**\n * Drop the reference of a class.\n * @param {object} poll The poll to receive the reference.\n * @param {string} className The class name.\n * @return {string}\n */\nvar decrementReference = function decrementReference(poll, className) {\n  if (poll[className]) {\n    poll[className] -= 1;\n  }\n  return className;\n};\n\n/**\n * Track a class and add to the given class list.\n * @param {Object} classListRef A class list of an element.\n * @param {Object} poll         The poll to be used.\n * @param {Array}  classes      The list of classes to be tracked.\n */\nvar trackClass = function trackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    incrementReference(poll, className);\n    classListRef.add(className);\n  });\n};\n\n/**\n * Untrack a class and remove from the given class list if the reference\n * reaches 0.\n * @param {Object} classListRef A class list of an element.\n * @param {Object} poll         The poll to be used.\n * @param {Array}  classes      The list of classes to be untracked.\n */\nvar untrackClass = function untrackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    decrementReference(poll, className);\n    poll[className] === 0 && classListRef.remove(className);\n  });\n};\n\n/**\n * Public inferface to add classes to the document.body.\n * @param {string} bodyClass The class string to be added.\n *                           It may contain more then one class\n *                           with ' ' as separator.\n */\nvar add = exports.add = function add(element, classString) {\n  return trackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};\n\n/**\n * Public inferface to remove classes from the document.body.\n * @param {string} bodyClass The class string to be added.\n *                           It may contain more then one class\n *                           with ' ' as separator.\n */\nvar remove = exports.remove = function remove(element, classString) {\n  return untrackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}